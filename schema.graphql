# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type MainBanner {
  id: ID!
  texto: String
  link: String
}

input MainBannerWhereUniqueInput {
  id: ID
}

input MainBannerWhereInput {
  AND: [MainBannerWhereInput!]
  OR: [MainBannerWhereInput!]
  NOT: [MainBannerWhereInput!]
  id: IDFilter
  texto: StringFilter
  link: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MainBannerOrderByInput {
  id: OrderDirection
  texto: OrderDirection
  link: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input MainBannerUpdateInput {
  texto: String
  link: String
}

input MainBannerUpdateArgs {
  where: MainBannerWhereUniqueInput! = {id: 1}
  data: MainBannerUpdateInput!
}

input MainBannerCreateInput {
  texto: String
  link: String
}

type MainHeader {
  id: ID!
  itens(where: HeaderItemWhereInput! = {}, orderBy: [HeaderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeaderItemWhereUniqueInput): [HeaderItem!]
  itensCount(where: HeaderItemWhereInput! = {}): Int
}

input MainHeaderWhereUniqueInput {
  id: ID
}

input MainHeaderWhereInput {
  AND: [MainHeaderWhereInput!]
  OR: [MainHeaderWhereInput!]
  NOT: [MainHeaderWhereInput!]
  id: IDFilter
  itens: HeaderItemManyRelationFilter
}

input HeaderItemManyRelationFilter {
  every: HeaderItemWhereInput
  some: HeaderItemWhereInput
  none: HeaderItemWhereInput
}

input MainHeaderOrderByInput {
  id: OrderDirection
}

input MainHeaderUpdateInput {
  itens: HeaderItemRelateToManyForUpdateInput
}

input HeaderItemRelateToManyForUpdateInput {
  disconnect: [HeaderItemWhereUniqueInput!]
  set: [HeaderItemWhereUniqueInput!]
  create: [HeaderItemCreateInput!]
  connect: [HeaderItemWhereUniqueInput!]
}

input MainHeaderUpdateArgs {
  where: MainHeaderWhereUniqueInput! = {id: 1}
  data: MainHeaderUpdateInput!
}

input MainHeaderCreateInput {
  itens: HeaderItemRelateToManyForCreateInput
}

input HeaderItemRelateToManyForCreateInput {
  create: [HeaderItemCreateInput!]
  connect: [HeaderItemWhereUniqueInput!]
}

type HeaderItem {
  id: ID!
  texto: String
  link: String
  subItens(where: HeaderSubItemWhereInput! = {}, orderBy: [HeaderSubItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeaderSubItemWhereUniqueInput): [HeaderSubItem!]
  subItensCount(where: HeaderSubItemWhereInput! = {}): Int
}

input HeaderItemWhereUniqueInput {
  id: ID
}

input HeaderItemWhereInput {
  AND: [HeaderItemWhereInput!]
  OR: [HeaderItemWhereInput!]
  NOT: [HeaderItemWhereInput!]
  id: IDFilter
  texto: StringFilter
  link: StringFilter
  subItens: HeaderSubItemManyRelationFilter
}

input HeaderSubItemManyRelationFilter {
  every: HeaderSubItemWhereInput
  some: HeaderSubItemWhereInput
  none: HeaderSubItemWhereInput
}

input HeaderItemOrderByInput {
  id: OrderDirection
  texto: OrderDirection
  link: OrderDirection
}

input HeaderItemUpdateInput {
  texto: String
  link: String
  subItens: HeaderSubItemRelateToManyForUpdateInput
}

input HeaderSubItemRelateToManyForUpdateInput {
  disconnect: [HeaderSubItemWhereUniqueInput!]
  set: [HeaderSubItemWhereUniqueInput!]
  create: [HeaderSubItemCreateInput!]
  connect: [HeaderSubItemWhereUniqueInput!]
}

input HeaderItemUpdateArgs {
  where: HeaderItemWhereUniqueInput!
  data: HeaderItemUpdateInput!
}

input HeaderItemCreateInput {
  texto: String
  link: String
  subItens: HeaderSubItemRelateToManyForCreateInput
}

input HeaderSubItemRelateToManyForCreateInput {
  create: [HeaderSubItemCreateInput!]
  connect: [HeaderSubItemWhereUniqueInput!]
}

type HeaderSubItem {
  id: ID!
  texto: String
  link: String
}

input HeaderSubItemWhereUniqueInput {
  id: ID
}

input HeaderSubItemWhereInput {
  AND: [HeaderSubItemWhereInput!]
  OR: [HeaderSubItemWhereInput!]
  NOT: [HeaderSubItemWhereInput!]
  id: IDFilter
  texto: StringFilter
  link: StringFilter
}

input HeaderSubItemOrderByInput {
  id: OrderDirection
  texto: OrderDirection
  link: OrderDirection
}

input HeaderSubItemUpdateInput {
  texto: String
  link: String
}

input HeaderSubItemUpdateArgs {
  where: HeaderSubItemWhereUniqueInput!
  data: HeaderSubItemUpdateInput!
}

input HeaderSubItemCreateInput {
  texto: String
  link: String
}

type Usuario {
  id: ID!
  nome: String
  email: String
  senha: PasswordState
  cargo: Cargo
  criadoEm: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UsuarioWhereUniqueInput {
  id: ID
  email: String
}

input UsuarioWhereInput {
  AND: [UsuarioWhereInput!]
  OR: [UsuarioWhereInput!]
  NOT: [UsuarioWhereInput!]
  id: IDFilter
  nome: StringFilter
  email: StringFilter
  cargo: CargoWhereInput
  criadoEm: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UsuarioOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  email: OrderDirection
  criadoEm: OrderDirection
}

input UsuarioUpdateInput {
  nome: String
  email: String
  senha: String
  cargo: CargoRelateToOneForUpdateInput
  criadoEm: DateTime
}

input CargoRelateToOneForUpdateInput {
  create: CargoCreateInput
  connect: CargoWhereUniqueInput
  disconnect: Boolean
}

input UsuarioUpdateArgs {
  where: UsuarioWhereUniqueInput!
  data: UsuarioUpdateInput!
}

input UsuarioCreateInput {
  nome: String
  email: String
  senha: String
  cargo: CargoRelateToOneForCreateInput
  criadoEm: DateTime
}

input CargoRelateToOneForCreateInput {
  create: CargoCreateInput
  connect: CargoWhereUniqueInput
}

type Cargo {
  id: ID!
  nome: String
  admin: Boolean
  podeAdministrarUsuarios: Boolean
  podeAdministrarConteudo: Boolean
  podeAdministrarDadosBasicos: Boolean
  usuarios(where: UsuarioWhereInput! = {}, orderBy: [UsuarioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UsuarioWhereUniqueInput): [Usuario!]
  usuariosCount(where: UsuarioWhereInput! = {}): Int
}

input CargoWhereUniqueInput {
  id: ID
}

input CargoWhereInput {
  AND: [CargoWhereInput!]
  OR: [CargoWhereInput!]
  NOT: [CargoWhereInput!]
  id: IDFilter
  nome: StringFilter
  admin: BooleanFilter
  podeAdministrarUsuarios: BooleanFilter
  podeAdministrarConteudo: BooleanFilter
  podeAdministrarDadosBasicos: BooleanFilter
  usuarios: UsuarioManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UsuarioManyRelationFilter {
  every: UsuarioWhereInput
  some: UsuarioWhereInput
  none: UsuarioWhereInput
}

input CargoOrderByInput {
  id: OrderDirection
  nome: OrderDirection
  admin: OrderDirection
  podeAdministrarUsuarios: OrderDirection
  podeAdministrarConteudo: OrderDirection
  podeAdministrarDadosBasicos: OrderDirection
}

input CargoUpdateInput {
  nome: String
  admin: Boolean
  podeAdministrarUsuarios: Boolean
  podeAdministrarConteudo: Boolean
  podeAdministrarDadosBasicos: Boolean
  usuarios: UsuarioRelateToManyForUpdateInput
}

input UsuarioRelateToManyForUpdateInput {
  disconnect: [UsuarioWhereUniqueInput!]
  set: [UsuarioWhereUniqueInput!]
  create: [UsuarioCreateInput!]
  connect: [UsuarioWhereUniqueInput!]
}

input CargoUpdateArgs {
  where: CargoWhereUniqueInput!
  data: CargoUpdateInput!
}

input CargoCreateInput {
  nome: String
  admin: Boolean
  podeAdministrarUsuarios: Boolean
  podeAdministrarConteudo: Boolean
  podeAdministrarDadosBasicos: Boolean
  usuarios: UsuarioRelateToManyForCreateInput
}

input UsuarioRelateToManyForCreateInput {
  create: [UsuarioCreateInput!]
  connect: [UsuarioWhereUniqueInput!]
}

type DadoBasico {
  id: ID!
  telefone: String
  logo: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input DadoBasicoWhereUniqueInput {
  id: ID
}

input DadoBasicoWhereInput {
  AND: [DadoBasicoWhereInput!]
  OR: [DadoBasicoWhereInput!]
  NOT: [DadoBasicoWhereInput!]
  id: IDFilter
  telefone: StringFilter
}

input DadoBasicoOrderByInput {
  id: OrderDirection
  telefone: OrderDirection
}

input DadoBasicoUpdateInput {
  telefone: String
  logo: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input DadoBasicoUpdateArgs {
  where: DadoBasicoWhereUniqueInput! = {id: 1}
  data: DadoBasicoUpdateInput!
}

input DadoBasicoCreateInput {
  telefone: String
  logo: ImageFieldInput
}

type PaginaInicial {
  id: ID!
  conteudo: PaginaInicial_conteudo_Document
}

type PaginaInicial_conteudo_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PaginaInicialWhereUniqueInput {
  id: ID
}

input PaginaInicialWhereInput {
  AND: [PaginaInicialWhereInput!]
  OR: [PaginaInicialWhereInput!]
  NOT: [PaginaInicialWhereInput!]
  id: IDFilter
}

input PaginaInicialOrderByInput {
  id: OrderDirection
}

input PaginaInicialUpdateInput {
  conteudo: JSON
}

input PaginaInicialUpdateArgs {
  where: PaginaInicialWhereUniqueInput!
  data: PaginaInicialUpdateInput!
}

input PaginaInicialCreateInput {
  conteudo: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createMainBanner(data: MainBannerCreateInput!): MainBanner
  createMainBanners(data: [MainBannerCreateInput!]!): [MainBanner]
  updateMainBanner(where: MainBannerWhereUniqueInput! = {id: 1}, data: MainBannerUpdateInput!): MainBanner
  updateMainBanners(data: [MainBannerUpdateArgs!]!): [MainBanner]
  deleteMainBanner(where: MainBannerWhereUniqueInput! = {id: 1}): MainBanner
  deleteMainBanners(where: [MainBannerWhereUniqueInput!]!): [MainBanner]
  createMainHeader(data: MainHeaderCreateInput!): MainHeader
  createMainHeaders(data: [MainHeaderCreateInput!]!): [MainHeader]
  updateMainHeader(where: MainHeaderWhereUniqueInput! = {id: 1}, data: MainHeaderUpdateInput!): MainHeader
  updateMainHeaders(data: [MainHeaderUpdateArgs!]!): [MainHeader]
  deleteMainHeader(where: MainHeaderWhereUniqueInput! = {id: 1}): MainHeader
  deleteMainHeaders(where: [MainHeaderWhereUniqueInput!]!): [MainHeader]
  createHeaderItem(data: HeaderItemCreateInput!): HeaderItem
  createHeaderItems(data: [HeaderItemCreateInput!]!): [HeaderItem]
  updateHeaderItem(where: HeaderItemWhereUniqueInput!, data: HeaderItemUpdateInput!): HeaderItem
  updateHeaderItems(data: [HeaderItemUpdateArgs!]!): [HeaderItem]
  deleteHeaderItem(where: HeaderItemWhereUniqueInput!): HeaderItem
  deleteHeaderItems(where: [HeaderItemWhereUniqueInput!]!): [HeaderItem]
  createHeaderSubItem(data: HeaderSubItemCreateInput!): HeaderSubItem
  createHeaderSubItems(data: [HeaderSubItemCreateInput!]!): [HeaderSubItem]
  updateHeaderSubItem(where: HeaderSubItemWhereUniqueInput!, data: HeaderSubItemUpdateInput!): HeaderSubItem
  updateHeaderSubItems(data: [HeaderSubItemUpdateArgs!]!): [HeaderSubItem]
  deleteHeaderSubItem(where: HeaderSubItemWhereUniqueInput!): HeaderSubItem
  deleteHeaderSubItems(where: [HeaderSubItemWhereUniqueInput!]!): [HeaderSubItem]
  createUsuario(data: UsuarioCreateInput!): Usuario
  createUsuarios(data: [UsuarioCreateInput!]!): [Usuario]
  updateUsuario(where: UsuarioWhereUniqueInput!, data: UsuarioUpdateInput!): Usuario
  updateUsuarios(data: [UsuarioUpdateArgs!]!): [Usuario]
  deleteUsuario(where: UsuarioWhereUniqueInput!): Usuario
  deleteUsuarios(where: [UsuarioWhereUniqueInput!]!): [Usuario]
  createCargo(data: CargoCreateInput!): Cargo
  createCargos(data: [CargoCreateInput!]!): [Cargo]
  updateCargo(where: CargoWhereUniqueInput!, data: CargoUpdateInput!): Cargo
  updateCargos(data: [CargoUpdateArgs!]!): [Cargo]
  deleteCargo(where: CargoWhereUniqueInput!): Cargo
  deleteCargos(where: [CargoWhereUniqueInput!]!): [Cargo]
  createDadoBasico(data: DadoBasicoCreateInput!): DadoBasico
  createDadoBasicos(data: [DadoBasicoCreateInput!]!): [DadoBasico]
  updateDadoBasico(where: DadoBasicoWhereUniqueInput! = {id: 1}, data: DadoBasicoUpdateInput!): DadoBasico
  updateDadoBasicos(data: [DadoBasicoUpdateArgs!]!): [DadoBasico]
  deleteDadoBasico(where: DadoBasicoWhereUniqueInput! = {id: 1}): DadoBasico
  deleteDadoBasicos(where: [DadoBasicoWhereUniqueInput!]!): [DadoBasico]
  createPaginaInicial(data: PaginaInicialCreateInput!): PaginaInicial
  createPaginaInicials(data: [PaginaInicialCreateInput!]!): [PaginaInicial]
  updatePaginaInicial(where: PaginaInicialWhereUniqueInput!, data: PaginaInicialUpdateInput!): PaginaInicial
  updatePaginaInicials(data: [PaginaInicialUpdateArgs!]!): [PaginaInicial]
  deletePaginaInicial(where: PaginaInicialWhereUniqueInput!): PaginaInicial
  deletePaginaInicials(where: [PaginaInicialWhereUniqueInput!]!): [PaginaInicial]
  endSession: Boolean!
  authenticateUsuarioWithPassword(email: String!, senha: String!): UsuarioAuthenticationWithPasswordResult
  createInitialUsuario(data: CreateInitialUsuarioInput!): UsuarioAuthenticationWithPasswordSuccess!
}

union UsuarioAuthenticationWithPasswordResult = UsuarioAuthenticationWithPasswordSuccess | UsuarioAuthenticationWithPasswordFailure

type UsuarioAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Usuario!
}

type UsuarioAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUsuarioInput {
  nome: String
  email: String
  senha: String
}

type Query {
  mainBanners(where: MainBannerWhereInput! = {id: {equals: 1}}, orderBy: [MainBannerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MainBannerWhereUniqueInput): [MainBanner!]
  mainBanner(where: MainBannerWhereUniqueInput! = {id: 1}): MainBanner
  mainBannersCount(where: MainBannerWhereInput! = {id: {equals: 1}}): Int
  mainHeaders(where: MainHeaderWhereInput! = {id: {equals: 1}}, orderBy: [MainHeaderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MainHeaderWhereUniqueInput): [MainHeader!]
  mainHeader(where: MainHeaderWhereUniqueInput! = {id: 1}): MainHeader
  mainHeadersCount(where: MainHeaderWhereInput! = {id: {equals: 1}}): Int
  headerItems(where: HeaderItemWhereInput! = {}, orderBy: [HeaderItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeaderItemWhereUniqueInput): [HeaderItem!]
  headerItem(where: HeaderItemWhereUniqueInput!): HeaderItem
  headerItemsCount(where: HeaderItemWhereInput! = {}): Int
  headerSubItems(where: HeaderSubItemWhereInput! = {}, orderBy: [HeaderSubItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeaderSubItemWhereUniqueInput): [HeaderSubItem!]
  headerSubItem(where: HeaderSubItemWhereUniqueInput!): HeaderSubItem
  headerSubItemsCount(where: HeaderSubItemWhereInput! = {}): Int
  usuarios(where: UsuarioWhereInput! = {}, orderBy: [UsuarioOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UsuarioWhereUniqueInput): [Usuario!]
  usuario(where: UsuarioWhereUniqueInput!): Usuario
  usuariosCount(where: UsuarioWhereInput! = {}): Int
  cargos(where: CargoWhereInput! = {}, orderBy: [CargoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CargoWhereUniqueInput): [Cargo!]
  cargo(where: CargoWhereUniqueInput!): Cargo
  cargosCount(where: CargoWhereInput! = {}): Int
  dadoBasicos(where: DadoBasicoWhereInput! = {id: {equals: 1}}, orderBy: [DadoBasicoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DadoBasicoWhereUniqueInput): [DadoBasico!]
  dadoBasico(where: DadoBasicoWhereUniqueInput! = {id: 1}): DadoBasico
  dadoBasicosCount(where: DadoBasicoWhereInput! = {id: {equals: 1}}): Int
  paginaInicials(where: PaginaInicialWhereInput! = {}, orderBy: [PaginaInicialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaginaInicialWhereUniqueInput): [PaginaInicial!]
  paginaInicial(where: PaginaInicialWhereUniqueInput!): PaginaInicial
  paginaInicialsCount(where: PaginaInicialWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = Usuario

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
